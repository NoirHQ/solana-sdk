[package]
name = "solana-program"
description = "Solana Program"
documentation = "https://docs.rs/solana-program"
readme = "README.md"
version = { workspace = true }
authors = { workspace = true }
repository = { workspace = true }
homepage = { workspace = true }
license = { workspace = true }
edition = { workspace = true }
rust-version = "1.75.0" # solana platform-tools rust version

[dependencies]
bincode = { workspace = true }
blake3 = { workspace = true, features = ["digest", "traits-preview"] }
borsh = { workspace = true, optional = true }
borsh0-10 = { package = "borsh", version = "0.10.3", default-features = false, optional = true }
bs58 = { workspace = true }
bv = { workspace = true, features = ["serde"] }
bytemuck = { workspace = true }
bytemuck_derive = { workspace = true }
lazy_static = { workspace = true }
log = { workspace = true }
memoffset = { workspace = true }
nostd = { workspace = true }
num-derive = { workspace = true }
num-traits = { workspace = true, features = ["i128"] }
parity-scale-codec = { workspace = true, optional = true }
qualifier_attr = { workspace = true, optional = true }
rustversion = { workspace = true }
scale-info = { workspace = true, optional = true }
serde = { workspace = true }
serde_bytes = { workspace = true }
serde_derive = { workspace = true }
sha2 = { workspace = true }
sha3 = { workspace = true }
solana-frozen-abi = { workspace = true, optional = true }
solana-frozen-abi-macro = { workspace = true, optional = true }
solana-sdk-macro = { workspace = true }
spin = { workspace = true }
thiserror = { workspace = true }

# This is currently needed to build on-chain programs reliably.
# Borsh 0.10 may pull in hashbrown 0.13, which uses ahash 0.8, which uses
# getrandom 0.2 underneath. This explicit dependency allows for no-std if cargo
# upgrades Borsh's dependency to hashbrown 0.13.
# Remove this once borsh 0.11 or 1.0 is released, which correctly declares the
# hashbrown dependency as optional.
[target.'cfg(target_os = "solana")'.dependencies]
getrandom = { workspace = true, features = ["custom"] }

[target.'cfg(not(target_os = "solana"))'.dependencies]
ark-bn254 = { workspace = true, default-features = true }
ark-ec = { workspace = true, default-features = true }
ark-ff = { workspace = true, default-features = true }
ark-serialize = { workspace = true, default-features = true }
base64 = { workspace = true, features = ["alloc", "std"] }
bitflags = { workspace = true, default-features = true }
curve25519-dalek = { workspace = true }
libsecp256k1 = { workspace = true, features = ["static-context"] }
num-bigint = { workspace = true, default-features = true }
rand = { workspace = true }

[target.'cfg(not(target_os = "solana"))'.dev-dependencies]
arbitrary = { workspace = true, features = ["derive"] }
#libsecp256k1 = { workspace = true, features = ["hmac"] } # used by doctests
solana-logger = { workspace = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = { workspace = true, optional = true }
console_log = { workspace = true, optional = true }
getrandom = { workspace = true, features = ["js", "wasm-bindgen"], optional = true }
js-sys = { workspace = true, optional = true }
wasm-bindgen = { workspace = true, optional = true }

[dev-dependencies]
anyhow = { workspace = true }
array-bytes = { workspace = true }
assert_matches = { workspace = true }
itertools = { workspace = true }
serde_json = { workspace = true, default-features = true }
static_assertions = { workspace = true }

[build-dependencies]
rustc_version = { workspace = true }

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["std", "borsh"]
std = [
  "bincode/std",
  "blake3/std",
  "borsh?/std",
  "borsh0-10?/std",
  "bs58/std",
  "bv/std",
  "itertools/use_std",
  "libsecp256k1/default",
  "log/std",
  "nostd/std",
  "num-traits/std",
  "parity-scale-codec?/std",
  "rand/std",
  "scale-info?/std",
  "serde/std",
  "sha2/std",
  "sha3/std",
  "thiserror/std",
]
borsh = ["dep:borsh", "dep:borsh0-10"]
dev-context-only-utils = ["dep:qualifier_attr"]
frozen-abi = ["dep:solana-frozen-abi", "dep:solana-frozen-abi-macro"]
scale = ["parity-scale-codec", "scale-info"]
wasm-bindgen = [
  "dep:wasm-bindgen",
  "console_error_panic_hook",
  "console_log",
  "getrandom",
  "js-sys",
]
